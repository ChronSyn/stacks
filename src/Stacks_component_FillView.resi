open ReactNative
open Stacks_types

@react.component
export make: (
  ~top: responsiveProp<Style.size>=?,
  ~right: responsiveProp<Style.size>=?,
  ~bottom: responsiveProp<Style.size>=?,
  ~left: responsiveProp<Style.size>=?,
  ~padding: responsiveProp<float>=?,
  ~paddingX: responsiveProp<float>=?,
  ~paddingY: responsiveProp<float>=?,
  ~paddingTop: responsiveProp<float>=?,
  ~paddingBottom: responsiveProp<float>=?,
  ~paddingLeft: responsiveProp<float>=?,
  ~paddingRight: responsiveProp<float>=?,
  ~paddingEnd: responsiveProp<float>=?,
  ~paddingStart: responsiveProp<float>=?,
  ~margin: responsiveProp<float>=?,
  ~marginX: responsiveProp<float>=?,
  ~marginY: responsiveProp<float>=?,
  ~marginTop: responsiveProp<float>=?,
  ~marginBottom: responsiveProp<float>=?,
  ~marginLeft: responsiveProp<float>=?,
  ~marginRight: responsiveProp<float>=?,
  ~marginEnd: responsiveProp<float>=?,
  ~marginStart: responsiveProp<float>=?,
  ~alignX: responsiveProp<[axisX | axisY | space | stretch]>=?,
  ~alignY: responsiveProp<[axisX | axisY | space | stretch]>=?,
  ~alignSelf: responsiveProp<[axisX | axisY | stretch]>=?,
  ~direction: responsiveProp<direction>=?,
  ~wrap: responsiveProp<wrap>=?,
  ~flex: responsiveProp<flex>=?,
  ~accessibilityComponentType: Stacks_types.accessibilityComponentType=?,
  ~accessibilityElementsHidden: bool=?,
  ~accessibilityHint: string=?,
  ~accessibilityIgnoresInvertColors: bool=?,
  ~accessibilityLabel: string=?,
  ~accessibilityLiveRegion: Stacks_types.accessibilityLiveRegion=?,
  ~accessibilityRole: Stacks_types.accessibilityRole=?,
  ~accessibilityState: Accessibility.state=?,
  ~accessibilityTraits: array<AccessibilityTrait.t>=?,
  ~accessibilityValue: Accessibility.value=?,
  ~accessibilityViewIsModal: bool=?,
  ~accessible: bool=?,
  ~collapsable: bool=?,
  ~hitSlop: View.edgeInsets=?,
  ~importantForAccessibility: Stacks_types.importantForAccessibility=?,
  ~nativeID: string=?,
  ~needsOffscreenAlphaCompositing: bool=?,
  ~onAccessibilityEscape: unit => unit=?,
  ~onAccessibilityTap: unit => unit=?,
  ~onLayout: Event.layoutEvent => unit=?,
  ~onMagicTap: unit => unit=?,
  ~onMoveShouldSetResponder: Event.pressEvent => bool=?,
  ~onMoveShouldSetResponderCapture: Event.pressEvent => bool=?,
  ~onResponderEnd: Event.pressEvent => unit=?,
  ~onResponderGrant: Event.pressEvent => unit=?,
  ~onResponderMove: Event.pressEvent => unit=?,
  ~onResponderReject: Event.pressEvent => unit=?,
  ~onResponderRelease: Event.pressEvent => unit=?,
  ~onResponderStart: Event.pressEvent => unit=?,
  ~onResponderTerminate: Event.pressEvent => unit=?,
  ~onResponderTerminationRequest: Event.pressEvent => bool=?,
  ~onStartShouldSetResponder: Event.pressEvent => bool=?,
  ~onStartShouldSetResponderCapture: Event.pressEvent => bool=?,
  ~pointerEvents: Stacks_types.pointerEvents=?,
  ~removeClippedSubviews: bool=?,
  ~renderToHardwareTextureAndroid: bool=?,
  ~shouldRasterizeIOS: bool=?,
  ~style: Style.t=?,
  ~testID: string=?,
  ~children: React.element=?,
  ~onMouseDown: ReactEvent.Mouse.t => unit=?,
  ~onMouseEnter: ReactEvent.Mouse.t => unit=?,
  ~onMouseLeave: ReactEvent.Mouse.t => unit=?,
  ~onMouseMove: ReactEvent.Mouse.t => unit=?,
  ~onMouseOver: ReactEvent.Mouse.t => unit=?,
  ~onMouseOut: ReactEvent.Mouse.t => unit=?,
  ~onMouseUp: ReactEvent.Mouse.t => unit=?,
) => React.element
